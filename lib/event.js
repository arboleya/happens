// Generated by CoffeeScript 1.6.3
var Event,
  __slice = [].slice;

module.exports = Event = (function() {
  function Event() {}

  Event.prototype.on = function(key, callback) {
    var pool;
    pool = this.__listeners || (this.__listeners = []);
    return (pool[key] || (pool[key] = [])).push(callback);
  };

  Event.prototype.off = function(key, callback) {
    var pool;
    if ((pool = this.__listeners[key]) != null) {
      return pool.splice(pool.indexOf(callback), 1);
    }
  };

  Event.prototype.once = function(key, callback) {
    var _this = this;
    return this.on(key, function() {
      _this.off(key, callback);
      return callback.apply(_this, arguments);
    });
  };

  Event.prototype.emit = function() {
    var args, key, listener, pool, _i, _len, _results;
    key = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if ((pool = this.__listeners[key]) != null) {
      _results = [];
      for (_i = 0, _len = pool.length; _i < _len; _i++) {
        listener = pool[_i];
        _results.push(listener.apply(this, args));
      }
      return _results;
    }
  };

  Event.mixin = function(target) {
    var prop, _results;
    _results = [];
    for (prop in this.prototype) {
      _results.push(target[prop] = this.prototype[prop]);
    }
    return _results;
  };

  return Event;

})();
